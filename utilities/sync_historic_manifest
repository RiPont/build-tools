#!/bin/bash -ex

# Quickish hack to allow syncing a historic manifest in build-manifests.
# This will produce "build-manifest.xml", "build-properties.json", and
# "build.properties" (along with "build-manifests/") in the current
# working directory, and the repo sync in ${OUTDIR} (defaults to current
# working directory).

# Known limitations: it cannot produce the same build-properties file
# as the original build did, as it does not have access to the information
# from product-metadata.json as of the time of the build. Perhaps this
# information should be stored in the build manifest as well. As it is,
# currently this script only produces the basic info - PRODUCT, RELEASE,
# VERSION, BLD_NUM, and PROD_NAME, as well as PRODUCT_PATH which is presumed
# to be the same as PRODUCT with :: replaced by /.
# It also does not produce the CHANGELOG file.

PRODUCT=$1
RELEASE=$2
VERSION=$3
BLD_NUM=$4
OUTDIR=$5

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. "${SCRIPT_DIR}/../utilities/shell-utils.sh"
WORKDIR=$(pwd)

chk_set PRODUCT
chk_set RELEASE
chk_set VERSION
chk_set BLD_NUM

if [ ! -z "${OUTDIR}" ]; then
    # Create fresh outdir
    rm -rf "${OUTDIR}"
    mkdir -p "${OUTDIR}"
else
    OUTDIR=.
    WORKDIR=.
fi

PRODUCT_PATH=${PRODUCT/::/\/}
PROD_NAME=$(basename $PRODUCT_PATH)

if [ ! -e build-manifests ]; then
    git clone git://github.com/couchbase/build-manifests
else
    (cd build-manifests && git pull)
fi

pushd build-manifests
SHA=$(git log --format='%H' --grep "^$PRODUCT $RELEASE build $VERSION-$BLD_NUM$")
MANIFEST=$(git diff-tree --no-commit-id --name-only -r $SHA)
popd

pushd "${OUTDIR}"
echo "Syncing manifest $MANIFEST at $SHA"
echo ================================
repo init -u "${WORKDIR}/build-manifests" -b $SHA -g all -m $MANIFEST
repo sync --jobs=8
repo manifest -r > manifest.xml
echo
popd

echo "Creating properties files"
echo =========================
cp "${OUTDIR}/manifest.xml" build-manifest.xml
cat <<EOF > build-properties.json
{
  "PRODUCT": "$PRODUCT",
  "RELEASE": "$RELEASE",
  "VERSION": "$VERSION",
  "BLD_NUM": $BLD_NUM,
  "PROD_NAME": "$PROD_NAME",
  "PRODUCT_PATH": "$PRODUCT_PATH"
}
EOF
cat <<EOF > build.properties
PRODUCT=$PRODUCT
RELEASE=$RELEASE
VERSION=$VERSION
BLD_NUM=$BLD_NUM
PROD_NAME=$PROD_NAME
PRODUCT_PATH=$PRODUCT_PATH
EOF
echo
echo "Done!"

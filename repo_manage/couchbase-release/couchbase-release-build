#!/usr/bin/env -S python3 -u

import argparse
import logging
import os
import pathlib
import shutil
import sys
import yaml
from typing import Any, Dict, List, Tuple, Union
from util import enable_run_trace, pushd, render_template, run

SCRIPT_DIR: pathlib.Path = pathlib.Path(__file__).resolve().parent



class TestSpec:
    def __init__(
        self, baseimage: str, format: str, testver1: str, testver2: str
    ):
        self.baseimage: str = baseimage
        self.format: str = format
        self.testver1: str = testver1
        self.testver2: str = testver2

    def context_for(self, arch: str):
        """
        Return a template context for this arch
        """

        context: Dict[str, str] = {}
        context["baseimage"] = self.baseimage

        # Older versions available only on amd64
        if arch == "arm64":
            context["testver1"] = "7.1.2"
            context["testver2"] = "7.1.4"
        else:
            context["testver1"] = self.testver1
            context["testver2"] = self.testver1

        return context


class CouchbaseReleaseBuilder:

    def __init__(
        self, version:str, bldnum: str, conf_file: pathlib.Path
    ) -> None:

        self.script_dir = SCRIPT_DIR
        self.version: str = version
        self.bldnum: str = bldnum
        conf: Dict
        with conf_file.open() as c:
            conf = yaml.safe_load(c)
        self.targets: Dict[str, Any] = conf["targets"]
        self.build_dir: pathlib.Path = self.script_dir / "build"
        shutil.rmtree(self.build_dir, ignore_errors=True)
        self.build_dir.mkdir(exist_ok = True)
        self.testspecs: List[TestSpec] = []
        self.init_testspecs()


    def init_testspecs(self):
        """
        Initializes the set of testspecs to run
        """

        self.testspecs.append(TestSpec("centos:7", "rpm", "6.5.2", "7.1.1"))
        self.testspecs.append(TestSpec("almalinux:8", "rpm", "6.6.1", "7.1.0"))
        self.testspecs.append(TestSpec("almalinux:9", "rpm", "7.2.0", "7.2.0"))
        self.testspecs.append(TestSpec("amazonlinux:2", "rpm", "6.6.2", "7.0.4"))
        self.testspecs.append(TestSpec("amazonlinux:2023", "rpm", "7.2.0", "7.2.0"))
        self.testspecs.append(TestSpec("debian:10", "deb", "6.6.3", "7.1.1"),)
        self.testspecs.append(TestSpec("debian:11", "deb", "7.1.1", "7.1.3"),)
        self.testspecs.append(TestSpec("ubuntu:20.04", "deb", "6.6.5", "7.0.5"),)
        self.testspecs.append(TestSpec("ubuntu:22.04", "deb", "7.1.0", "7.1.1"),)


    def context_for(self, target: str) -> Dict[str, Union[str, pathlib.Path]]:
        """
        Returns a standard Jinja2 context for the specified target
        """
        return {
            "target": target,
            "bucket": self.targets[target]["s3"]["bucket"],
            "prefix": self.targets[target]["s3"]["prefix"],
            "transport": self.targets[target]["s3"]["transport"],
            "version": self.version,
            "bld_num": self.bldnum,
            "src_dir": self.script_dir
        }


    def build_deb(self, target: str) -> None:
        """
        Builds couchbase-<target>.deb, including the basic "Linux" listfile
        and GPG keys
        """

        deb_filename = \
            f"couchbase-{target}-{self.version}-{self.bldnum}-noarch.deb"
        logging.info(f"Creating {deb_filename}")

        # Construct the DEBIAN directory
        top: pathlib.Path = self.build_dir / "deb"
        shutil.rmtree(top, ignore_errors=True)
        top.mkdir()
        debian: pathlib.Path = top / "DEBIAN"
        debian.mkdir()

        # Render the templates
        for debtmpl in (self.script_dir / "deb").glob("*.j2"):
            render_template(
                debtmpl,
                debian / debtmpl.stem,
                self.context_for(target)
            )
        os.chmod(debian / "postinst", 0o755)

        # Add GPG public keys
        gpg_file: pathlib.Path = top \
            / "usr" / "share" / "keyrings" / "couchbase-repokey.asc"
        gpg_file.parent.mkdir(parents = True)
        shutil.copy(
            self.script_dir / "GPG-KEY-COUCHBASE-2.0",
            gpg_file
        )

        # Build the package
        logging.debug("Running dpkg-deb")
        with pushd(self.build_dir):
            run(f"dpkg-deb --build -Zgzip deb {deb_filename}")


    def build_rpm(self, target: str) -> None:
        """
        Builds couchbase-<target>.rpm, including the basic "Linux" repofile
        and GPG keys
        """

        rpm_filename = \
            f"couchbase-{target}-{self.version}-{self.bldnum}.noarch.rpm"
        logging.info(f"Creating {rpm_filename}")

        # Construct the rpmbuild directory
        top: pathlib.Path = self.build_dir / "rpmbuild"
        shutil.rmtree(top, ignore_errors=True)
        top.mkdir()

        # Render the .spec file from template
        render_template(
            self.script_dir / "rpm" / "couchbase-release.spec.in",
            top / "couchbase-release.spec",
            self.context_for(target)
        )

        # Build the package
        logging.debug("Running rpmbuild")
        run([
            "rpmbuild", "-bb",
            # _topdir is where rpmbuild puts things
            "-D", f"_topdir {top}",
            f"{top}/couchbase-release.spec"
        ])
        rpm_file = top / "RPMS" / "noarch" / rpm_filename
        rpm_file.rename(self.build_dir / rpm_filename)


    def build_target(self, target:str) -> None:
        """
        Builds couchbase-<target>.rpm and couchbase-<target>.deb
        """

        self.build_deb(target)
        self.build_rpm(target)


    def build(self, targets: List[str]) -> None:
        """
        Executes build steps for specified targets (default: all)
        """

        if len(targets) == 0:
            # Default to all known targets; use list comprehension to
            # keep mypy happy
            targets = [x for x in self.targets.keys()]

        for target in targets:
            self.build_target(target)


    def run_test(
        self, target: str, testspec: TestSpec, arch: str
    ) -> None:
        """
        Builds a local Docker image to test the created
        couchbase-release packages
        """

        logging.info(f"Running test build for {target} - {testspec.baseimage}")
        context = self.context_for(target)
        context.update(testspec.context_for(arch))
        render_template(
            self.script_dir / "test" / f"Dockerfile.{testspec.format}.j2",
            self.build_dir / "Dockerfile",
            context
        )
        with pushd(self.build_dir):
            try:
                run(
                    f"docker buildx build --platform {arch} --pull --no-cache ."
                )
            finally:
                run(
                    "docker buildx prune -f"
                )


    def test_target(self, target: str) -> None:
        """
        Runs tests for created installers across defined set of OSes
        """

        for testspec in self.testspecs:
            for arch in ["arm64", "amd64"]:
                self.run_test(target, testspec, arch)


    def test(self, targets: List[str]) -> None:
        """
        Runs tests for specified targets (default: all)
        """

        if len(targets) == 0:
            # Default to all known targets; use list comprehension to
            # make mypy happy
            targets = [x for x in self.targets.keys()]

        for target in targets:
            self.test_target(target)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Build script for couchbase-release packages"
    )
    parser.add_argument(
        "--version", "-v", type=str, required=True,
        help="Version of package"
    )
    parser.add_argument(
        "--bldnum", "-b", type=str, required=True,
        help="Build number of package"
    )
    parser.add_argument(
        "--targets", "-t", type=str, nargs="+", default=[],
        help="Which target(s) to produce (default: all)"
    )
    parser.add_argument(
        "--conf-file", "-c", type=pathlib.Path,
        default=SCRIPT_DIR.parent / "conf" / "repo_manage.yaml",
        help="Path to repo_manage.yaml"
    )
    parser.add_argument(
        "--skip-tests", action="store_true", help="Skip running tests"
    )
    parser.add_argument(
        "--debug", action="store_true", help="Emit debug logging"
    )

    args = parser.parse_args()

    # Initialize logging
    logging.basicConfig(
        stream=sys.stderr,
        format='%(asctime)s: %(levelname)s: %(message)s',
        level=logging.DEBUG if args.debug else logging.INFO
    )
    enable_run_trace(args.debug)

    builder = CouchbaseReleaseBuilder(
        args.version, args.bldnum, args.conf_file
    )

    builder.build(args.targets)
    if not args.skip_tests:
        builder.test(args.targets)

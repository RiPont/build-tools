#!/bin/bash -e

# Generates the Dockerfile and supporting scripts for a product in
# the github.com/couchbase/docker repository, and then
# creates an appropriate branch for Docker Hub autobuilds.
# Assumes the running account has necessary SSH permissions to
# push to that repository.

usage() {
    echo "Usage: $0 -p PRODUCT -v VERSION -e EDITION [ -u ]"
    echo "If -u is specified, will update :community or :enterprise/:latest tags also"
    exit 1
}

status() {
    echo "-- $@"
}

# Read and verify command-line parameters
UPDATE_EDITION=
REPO=ssh://git@github.com/couchbase/docker
while getopts ":p:v:e:ur:" opt; do
  case ${opt} in
    p)
      PRODUCT=${OPTARG}
      ;;
    v)
      VERSION=${OPTARG}
      ;;
    e)
      EDITION=${OPTARG}
      ;;
    u)
      UPDATE_EDITION=true
      ;;
    \?)
      usage
      ;;
    :)
      echo "${OPTARG} requires an argument"
      usage
      ;;
    r)
      echo "Setting repository to ${OPTARG} for testing"
      rm -rf docker
      REPO=${OPTARG}
      ;;
  esac
done

if [ -z "${PRODUCT}" -o -z "${VERSION}" -o -z "${EDITION}" ]; then
    usage
fi

if [ ! -e docker ]; then
    status "Cloning docker repo"
    git clone "${REPO}" docker
else
    status "Updating docker repo"
    (cd docker && git checkout master && git pull)
fi

cd docker
DOCKERFILE_DIR=${EDITION}/${PRODUCT}/${VERSION}
if [ -d "${DOCKERFILE_DIR}" ]; then
    echo "${DOCKERFILE_DIR} already exists! Skipping creation"
else

    GO=go
    type -P go > /dev/null 2>&1 || {
        pushd ..
        GO=$(pwd)/go/bin/go
        if [ ! -x ${GO} ]; then
            status Downloading golang
            GODL=https://dl.google.com/go/go1.12.10.linux-amd64.tar.gz
            if [ ! -e $(basename ${GODL}) ]; then
                curl -LO ${GODL}
            fi
            tar xf $(basename ${GODL})
        fi
        popd
    }

    status "Creating new Dockerfile and scripts"
    mkdir -p "${DOCKERFILE_DIR}"
    ${GO} run generate/generator/generate.go $(pwd)
    git add "${DOCKERFILE_DIR}"
    git commit -m "Adding ${PRODUCT} ${EDITION} ${VERSION}"
    git push origin HEAD:refs/heads/master
fi

status "Checking Dockerhub autobuild branch"
cp -a "${DOCKERFILE_DIR}" ../branch
BRANCH=${PRODUCT}-${VERSION}-${EDITION}
if git ls-remote --heads --exit-code origin ${BRANCH}; then
    git checkout -b ${BRANCH} --track origin/${BRANCH}
    VERB=Updating
else
    git checkout --orphan ${BRANCH}
    git reset --hard
    VERB=Creating
fi
status "${VERB} Dockerhub autobuild branch"
rm -rf branch
mv ../branch .
git add branch
git commit --allow-empty -m "${VERB} branch ${BRANCH} for Docker Hub autobuild"
git push origin ${BRANCH}:refs/heads/${BRANCH}
if [ "${UPDATE_EDITION}" = "true" ]; then
    git push --force origin ${BRANCH}:refs/heads/${PRODUCT}-${EDITION}
    if [ "$EDITION" = "enterprise" ]; then
        git push --force origin ${BRANCH}:refs/heads/${PRODUCT}-latest
    fi
fi
git checkout master
status "Done!"

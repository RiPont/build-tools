#!/usr/bin/env python3

import json
import os
import argparse
from subprocess import check_call
from manifest_util import scan_manifests
import time

# Command-line args
parser = argparse.ArgumentParser()
parser.add_argument("-p", "--manifest-project", type=str,
                    default="ssh://git@github.com/couchbase/manifest",
                    help="Alternate git URL for manifest")
args = parser.parse_args()
MANIFEST_PROJECT = args.manifest_project

# Remove any existing trigger files
trigger_filename = os.path.abspath("trigger.properties")
toy_trigger_filename = os.path.abspath("toy-trigger.properties")
if os.path.exists(trigger_filename):
  os.remove(trigger_filename)
if os.path.exists(toy_trigger_filename):
  os.remove(toy_trigger_filename)

# Initialize previous-check state file (use NAS if available).
# Note: this uses the same statefile for ALL manifest repositories
# being scanned. This does presume that relative manifest paths
# are unique across ALL manifest repositories.
if os.access("/buildteam/statefiles", os.W_OK):
  state_filename = os.path.abspath("/buildteam/statefiles/scan-manifests-state.json")
else:
  state_filename = os.path.abspath("last-check.json")
if os.path.exists(state_filename):
  with open(state_filename, "r") as state:
    check_states = json.load(state)
else:
  check_states = {}

# Iterate through the manifests, and find the first one that isn't inactive
# and hasn't been checked in at least 'interval' minutes.
manifests = scan_manifests(MANIFEST_PROJECT)
result = ""
for manifest in manifests:
  # Skip manifests marked "inactive"
  if manifests[manifest].get("inactive", False):
    continue
  # Skip manifests explicitly marked "do-build=False"
  if not manifests[manifest].get("do-build", True):
    continue
  interval = manifests[manifest].get("interval", 240)
  if manifest not in check_states:
    check_states[manifest] = 0
  now = time.time()
  if (now - check_states[manifest] > interval * 60):
    result = manifest
    check_states[manifest] = now
    break

print ("\n----------------------------------\n")
if result == "":
  print ("No manifests need checking yet; not triggering build")

elif manifests[result].get("toy-build", False):
  print ("Triggering toy manifest {}".format(result))
  with open(toy_trigger_filename, "w") as trigger:
    trigger.write(f"MANIFEST_FILE={result}\n")
    trigger.write(f"MANIFEST_REPO={MANIFEST_PROJECT}\n")
    trigger.write(f"TRIGGER_BUILD=true\n")
    trigger.write(f"SKIP_DUPLICATE_BUILD=true\n")

else:
  print ("Triggering manifest {}".format(result))
  with open(trigger_filename, "w") as trigger:
    trigger.write("MANIFEST={}\n".format(result))
    trigger.write("MANIFEST_PROJECT={}\n".format(MANIFEST_PROJECT))
    trigger.write("TRIGGER_BLACKDUCK={}\n".format(
      manifests[result].get("trigger_blackduck", False)
    ))

# Save updated check-states
with open(state_filename, "w") as state:
  json.dump(check_states, state)
print ("\n----------------------------------\n")

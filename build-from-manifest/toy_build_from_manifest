#!/bin/bash -ex

env

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Set and/or error-check build number
if [ ! -z "${BLD_NUM_ARG}" ]; then
    if [ ${BLD_NUM_ARG} -lt 50000 ]; then
        echo "BLD_NUM_ARG must be greater than 50000!"
        exit 1
    else
        BLD_NUM=${BLD_NUM_ARG}
    fi
else
    BLD_NUM=$((BUILD_NUMBER + 50000))
fi

# Read possible Gerrit patches from environment
OPTS=""
if [[ -n $GERRIT_REVIEW_IDS ]]; then
    OPTS+="-r $GERRIT_REVIEW_IDS "
elif [[ -n $GERRIT_CHANGE_IDS ]]; then
    OPTS+="-g $GERRIT_CHANGE_IDS "
elif [[ -n $GERRIT_TOPICS ]]; then
	OPTS+="-t $GERRIT_TOPICS "
fi

MANIFEST_PARAMS="-u ${MANIFEST_REPO} -m ${MANIFEST_FILE}"

rm -rf src
mkdir src
pushd src

echo "Syncing manifest $MANIFEST"
echo ================================
repo init --no-repo-verify --repo-url=git://github.com/couchbasedeps/git-repo ${MANIFEST_PARAMS} -g all --reference=~/reporef
repo sync --jobs=24 --quiet

if [ ! -z "${OPTS}" ]; then
    PATCH=../patch_via_gerrit
    curl -L -o ${PATCH} \
    http://latestbuilds.service.couchbase.com/builds/latestbuilds/python_tools/patch_via_gerrit/1.0.0/9/centos6/patch_via_gerrit
    chmod +x ${PATCH}
    ${PATCH} -d -c ${HOME}/.ssh/patch_via_gerrit.ini ${OPTS} -s ${WORKSPACE}/src

    # QQQ this should probably parse all <copyfile> and <linkfile> directives
    if [ -f tlm/CMakeLists.txt ]; then
        cp -f tlm/CMakeLists.txt CMakeLists.txt
    fi
fi

repo manifest -r > manifest.xml

echo "Removing any broken symlinks"
echo ============================
# Since we dereference symlinks below, any broken symlinks will cause tar to
# fail with a mysterious "file deleted before we read it" error. Seems
# probably best just to remove them.
find . -xtype l -delete

echo "Creating source tarball"
echo =======================
# As with build_from_manifest.py, we dereference symlinks so .git directories
# will work on Windows. As such, we don't actually need the .repo directory.
tar --create --file ../source.tar.gz --gzip --dereference --exclude .repo .[A-z]* *
popd

echo "Creating properties files"
echo =========================
cp src/manifest.xml manifest.xml

# Generate properties based on manifest - we can use repo's copy of the
# manifest repo
"${SCRIPT_DIR}/props-for-manifest" \
    -o build.properties \
    -p src/.repo/manifests \
    ${MANIFEST_FILE}

# Append build number to properties file
echo "BLD_NUM=${BLD_NUM}" >> build.properties

# This is kind of cheating...
eval $(grep -e PROD_NAME -e VERSION -e RELEASE build.properties)

# Create build-specifically-named versions of the artifacts
# QQQ Not *entirely* sure why we need both of these prefixes
VER_PREFIX="${PROD_NAME}-${VERSION}-${BLD_NUM}"
REL_PREFIX="${PROD_NAME}-${RELEASE}-${BLD_NUM}"
mv source.tar.gz ${VER_PREFIX}-source.tar.gz
mv manifest.xml ${VER_PREFIX}-manifest.xml
# Need to keep original build.properties so Jenkins job can inject it,
# so use cp rather than mv
cp build.properties ${REL_PREFIX}.properties

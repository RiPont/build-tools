#!/usr/bin/env python3

import argparse
import csv
import json
import logging
import mdutils
import os
import pathlib
import requests
import sys

from collections import defaultdict
from mdutils.mdutils import MdUtils
from mdutils.tools.tools import TextUtils
from pathlib import Path

logger = logging.getLogger('blackduck/check-component-lic')
logger.setLevel(logging.DEBUG)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)
ch = logging.StreamHandler()
logger.addHandler(ch)

class VulnerabilityReportGenerator:
    def __init__(self, product, version, security_file, source_file, report_dir):
        self.product = product
        self.version = version

        logger.debug("Reading security CSV")
        vulns = csv.DictReader(security_file.readlines())
        self.vulns = defaultdict(list)
        for vuln in vulns:
            self.vulns[vuln['Version id']].append(vuln)

        logger.debug("Reading source CSV")
        locs = csv.DictReader(source_file.readlines())
        self.source_loc = defaultdict(list)
        for loc in locs:
            self.source_loc[loc['Version id']].append(loc['Path'])

        self.report_dir = Path(report_dir)

    def init_report(self):
        """
        Prepares report directory for report content
        """

        # Dir where the per-product-version report is kept
        prodver_report_dir = self.report_dir / self.product / self.version
        logger.debug(f"Initializing report dir {prodver_report_dir}")
        prodver_report_dir.mkdir(parents=True, exist_ok=True)

        # The per-product-version report markdown file itself
        self.report_index = MdUtils(
            file_name=str(prodver_report_dir / "README"),
            title=f"Vulnerability Report for {self.product} {self.version}"
        )

        # Initialize license table headers
        self.vuln_table = [
            "Component",
            f"Vulnerability{'&nbsp;' * 15}",
            "Source Location"
        ]

    def produce_report(self):
        """
        Iterates through CSV information from Black Duck and creates
        rows in output table
        """

        logger.debug("Producing report")


        for comp_ver, vulns in self.vulns.items():

            # Create HTML-ish list of source locations
            source_list = "".join(
                f"<li>{loc}</li>" for loc in self.source_loc[comp_ver]
            )

            # Create HTML-ish list of vulnerabilities
            cve_list = []
            for vuln in vulns:
                vuln_text = TextUtils.text_external_link(
                    vuln['Vulnerability id'],
                    vuln['URL']
                )
                # For some reason, the security report from Black Duck
                # includes some duplicates
                if not vuln_text in cve_list:
                    cve_list.append(vuln_text)

            vuln_list = "".join(
                f"<li>{cve}</li>" for cve in cve_list
            )

            self.vuln_table.extend([
                f"{vuln['Component name']} {vuln['Component version name']}",
                f"<ul>{vuln_list}</ul>",
                f"<ul>{source_list}</ul>"
           ])

    def close_report(self):
        """
        Finalizes report directory
        """

        self.report_index.new_table(
            columns=3,
            rows=len(self.vuln_table) // 3,
            text=self.vuln_table,
            text_align="left"
        )
        self.report_index.create_md_file()

    def generate(self):
        """
        Main processing entry point
        """

        self.init_report()
        self.produce_report()
        self.close_report()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Produce vulnerability reports'
    )
    parser.add_argument('product', help='Product from Black Duck server')
    parser.add_argument('version', help='Version of <product>')
    parser.add_argument('-s', '--security-report', required=True,
                        type=argparse.FileType('r', encoding='UTF-8'),
                        help='Path to Black Duck "security.csv" report')
    parser.add_argument('-r', '--source-report', required=True,
                        type=argparse.FileType('r', encoding='UTF-8'),
                        help='Path to Black Duck "source.csv" report')
    parser.add_argument('-d', '--report-directory', type=str, required=True,
                        help='Path to output report directory')

    args = parser.parse_args()

    if not os.path.isdir(args.report_directory):
        logger.error(f"Output report directory does not exist: {args.report_directory}")
        sys.exit(1)

    report = VulnerabilityReportGenerator(
        args.product, args.version,
        args.security_report, args.source_report,
        args.report_directory
    )
    if not report.generate():
        logger.warning(f"WARNING: Vulnerabilities found!")
    sys.exit(0)

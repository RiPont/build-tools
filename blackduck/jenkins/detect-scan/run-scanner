#!/usr/bin/env python3

import argparse
import json
import os
import string
import urllib.request

from subprocess import check_call

# Parse command line
parser = argparse.ArgumentParser(
    description='Run Synopsis Detect scanner for Black Duck'
)
parser.add_argument('--config', '-c',
                    help='Config JSON file containing Detect options')
parser.add_argument('--token', '-t', required=True,
                    help='File containing Hub API token')
parser.add_argument('--pdf', action='store_true',
                    help='Generate PDF of results')
parser.add_argument('--dry-run', '-n', action='store_true',
                    help="Dry run (do not upload scan to Hub)")
args = parser.parse_args()

# Read input config files
with open(args.token, "r") as t:
    token = t.read().rstrip()
if args.config is not None:
    with open(args.config, "r") as c:
        config = json.load(c)
else:
    config = { "detect_opts": {} }

# Download latest detect script
url = 'https://detect.synopsys.com/detect.sh'
urllib.request.urlretrieve(url, '/tmp/detect.sh')
os.chmod('/tmp/detect.sh', 0o755)

# Start with default properties, then update with config-file-provided
# ones; this allows config file to override defaults
properties = {
    "blackduck.api.token": token,
    "blackduck.url": "https://blackduck.build.couchbase.com/",
    "blackduck.trust.cert": "true",
    "detect.project.name": "${PRODUCT}",
    "detect.project.version.name": "${VERSION}",
    "detect.blackduck.signature.scanner.memory": 10240,
    "detect.report.timeout": 3600,
}
if args.dry_run:
    properties["detect.blackduck.signature.scanner.dry.run"] = "true"
    properties["detect.cleanup"] = "false"
elif args.pdf:
    # This argument makes the job wait until the scan is fully uploaded
    # to Black Duck Hub. But if "dry.run" is true, it doesn't upload
    # the signature scan results, therefore the scan will never be
    # fully uploaded. So we won't enable the .pdf generation if dry.run
    # is selected.
    properties["detect.risk.report.pdf"] = "true"

properties.update(config["detect_opts"])

# Construct command line by translating properties to args
detect_args = [
    "/tmp/detect.sh"
]
if args.dry_run:
    # Suggested by Black Duck support
    detect_args.append("-d")
for prop, value in properties.items():
    detect_args.append(
        "--" + prop + "=" + string.Template(str(value)).safe_substitute(os.environ)
    )

# Special sauce for Python - needs to use a specific bd-venv which must
# have been pre-installed with all dependencies
# https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/631276245/Package+Manager+Information#The-Pip-detector
source_root = os.path.join(os.environ.get("WORKSPACE", "."), "src")
venv_path = os.path.join(source_root, "..", "bd-venv")
if os.path.isdir(venv_path):
    detect_args.extend([
        "--detect.pip.path=" + os.path.join(venv_path, "bin", "pip"),
        "--detect.python.path=" + os.path.join(venv_path, "bin", "python")
    ])

# Iterate through code paths, calling scanner
first_path = True
for i, path in enumerate(config.get("source_paths", ['.']), start=1):
    suffix = f"-{i}" if i > 1 else ""
    source_path = os.path.join(source_root, path)
    path_args = [
        "--detect.source.path=" + source_path,
        "--detect.code.location.name=" + "${PRODUCT}/${VERSION}" + suffix,
        "--detect.project.codelocation.unmap=" + f"{first_path}"
    ]

    check_call(detect_args + path_args)

    first_path = False

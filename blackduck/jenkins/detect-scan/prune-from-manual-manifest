#!/usr/bin/env python3

import argparse
import logging
import pathlib
import shutil
import sys
import yaml

from blackduck.HubRestApi import HubInstance
from urllib.parse import urlparse, quote

class Pruner:
    """
    Loads the manual manifest, and deletes code paths based on the src-path
    attributes.
    """

    def __init__(self, dryrun):
        self.dryrun = dryrun
        logging.info(f"Preparing to prune source for manual components")
        self.src_dirs = {}

    def add_manifest(self, manifest_file):
        """
        Given the YAML representation of the manifest, store the important
        information
        """

        logging.debug("Loading source directories from Black Duck manifest "
                      f"{manifest_file.name}")
        manifest_dir = pathlib.Path(manifest_file.name).parent
        manifest = yaml.safe_load(manifest_file)

        try:
            components = manifest['components']
        except KeyError:
            logging.fatal("Manifest does not have top-level 'components' key!")
            sys.exit(2)

        # Determine root dir which src-path values are relative to.
        # src-root-dir is itself relative to the directory containing
        # the manifest file.
        try:
            root_dir_str = manifest['meta']['src-root-dir']
        except KeyError:
            root_dir_str = '.'
        root_dir = manifest_dir / root_dir_str

        dir_count = len(self.src_dirs)
        for component, values in components.items():
            if "src-path" in values:
                self.src_dirs[component] = \
                    (root_dir / values["src-path"]).resolve()
        logging.debug(f"Loaded {len(self.src_dirs) - dir_count} "
                       "source directories")

    def prune(self):
        """
        Executes pruning operations
        """

        logging.info(f"Pruning {len(self.src_dirs)} source directories")
        # Sort the paths by number of directories, so we delete depth-first
        for component, src_path in sorted(
            self.src_dirs.items(),
            key=lambda x: 0 - len(x[1].parents)
        ):
            path = pathlib.Path(src_path)
            if not path.exists():
                logging.fatal(f"Source path {src_path} does not exist!")
                sys.exit(3)
            logging.info(f"Pruning {src_path} for component {component}")
            if self.dryrun:
                logging.info(f"(skipping {src_path} due to dryrun)")
            else:
                shutil.rmtree(path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Prune source directories for manually-added components"
    )
    parser.add_argument('-d', '--debug', action='store_true',
        help="Produce debugging output")
    parser.add_argument('-m', '--manifest', required=True, nargs='+',
        type=argparse.FileType('r'),
        help="YAML manifest of manual components")
    parser.add_argument('-n', '--dryrun', action='store_true',
        help="Dry run - don't update Black Duck, just report actions")
    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    logging.basicConfig(
        stream=sys.stderr,
        format='%(threadName)s: %(asctime)s: %(levelname)s: %(message)s',
        level=log_level
    )

    pruner = Pruner(args.dryrun)
    for manifest in args.manifest:
        pruner.add_manifest(manifest)
    pruner.prune()

# This workflow aims to create a release from the most current tag
# The release will contain a changelog (from previous tag to current)
# and artifacts (which are downloaded from packages.couchbase.com
# and attached)
#
# To use it in a repo, create .github/workflows/release.yml with
# the following:
#
# ------
# on:
#   push:
#     tags:
#       # Only act on unhyphenated tags - e.g. 1.0.2 = ok, 1.0.2-beta = skip
#       - "*"
#       - "!*-*"
#
# jobs:
#   release:
#     uses: couchbase/build-tools/.github/workflows/create-release.yml@master
#     with:
#       artifacts: |
#         ["{0}-image_{1}.tgz", "{0}-image_{1}.tgz.sha256"]
# ------
#
# Note: with/artifacts is optional, but if provided should be a JSON
# stringified array of filenames; these will be downloaded from
# https://packages.couchbase.com/[repo]/[tag]/ and uploaded to the
# release. Also note some substitutions are handled automatically:
#   - {0} => repository name
#   - {1} => current tag/version


on:
  workflow_call:
    inputs:
      artifacts:
        description: 'Stringified JSON list of artifacts'
        default: '[]'
        required: false
        type: string

name: Release

jobs:
  # Gather some relevant information - current tag, previous tag and changelog
  gather-info:
    name: Gather info
    runs-on: ubuntu-latest
    outputs:
      current_tag: ${{ env.CURRENT_TAG }}
      previous_tag: ${{ env.PREVIOUS_TAG }}
      changelog: ${{ env.CHANGELOG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get current tag
        run: echo "CURRENT_TAG=$(git tag --sort=-creatordate | grep -v '-' | head -1)" >> $GITHUB_ENV
      - name: Get previous tag
        run: echo "PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v '-' | head -2 | tail -1)" >> $GITHUB_ENV
      - name: Get changelog
        run: |
          CHANGELOG=$(cat << EOF
          $(git log --pretty=format:'- %s' ${{ env.PREVIOUS_TAG }}..${{ env.CURRENT_TAG }})
          EOF
          )
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  # Ensure artifacts are available for download (so we can error out early
  # if not, since we need to create the release before we download them)
  pre-flight-checks:
    name: Pre-flight checks
    runs-on: ubuntu-latest
    needs: gather-info
    strategy:
      matrix:
        ARTIFACTS: ${{ fromJson(inputs.artifacts) }}
    if: ${{ fromJSON(inputs.artifacts)[0] }}
    steps:
      - name: Get artifact name
        run: echo "ARTIFACT_NAME=${{ format(matrix.ARTIFACTS, github.event.repository.name, needs.gather-info.outputs.current_tag) }}" >> $GITHUB_ENV
      - name: Check download is OK
        run: curl -fI https://packages.couchbase.com/${{ github.event.repository.name }}/${{ needs.gather-info.outputs.current_tag }}/${{ env.ARTIFACT_NAME }};

  # Create a release from the pushed tag
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [gather-info, pre-flight-checks]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{ needs.gather-info.outputs.changelog }}
          draft: false
          prerelease: false

  # Upload any artifacts - which should be ok because we checked
  # them in pre-flight-checks
  upload:
    name: Upload Artifacts
    runs-on: ubuntu-latest
    needs: [gather-info, pre-flight-checks, release]
    strategy:
      matrix:
        ARTIFACTS: ${{ fromJson(inputs.artifacts) }}
    if: ${{ fromJSON(inputs.artifacts)[0] }}
    steps:
      - name: Get artifact name
        run: echo "ARTIFACT_NAME=${{ format(matrix.ARTIFACTS, github.event.repository.name, needs.gather-info.outputs.current_tag) }}" >> $GITHUB_ENV
      - name: Download
        run: curl -fLO https://packages.couchbase.com/${{ github.event.repository.name }}/${{ needs.gather-info.outputs.current_tag }}/${{ env.ARTIFACT_NAME }};
      - name: Get MIME type
        run: echo "MIME_TYPE=$(file -b --mime-type ${{ env.ARTIFACT_NAME }})" >> $GITHUB_ENV
      - name: Upload
        id: upload-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_NAME }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: ${{ env.MIME_TYPE }}
